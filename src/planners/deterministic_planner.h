/*
   ppddl-planner - client for IPPC'08

   Copyright (C) 2008 Florent Teichteil-Koenigsbuch and Guillaume Infantes and Ugur Kuter

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software Foundation,
   Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

*/

#ifndef DETERMINISTIC_PLANNER_H_
#define DETERMINISTIC_PLANNER_H_

#include <list>
#include <string>
#include <limits>

class BaseDeterminization;
class Action;

class DeterministicPlanner
{
public :
	typedef std::list<const Action*> plan_t;

protected :
	const BaseDeterminization& det_;

	/* Launch the deterministic planner with time out */
    FILE* launch_planner(unsigned int time_limit = std::numeric_limits<unsigned int>::max(), bool optimization_mode = false) const;

    /* Execute the deterministic planner using execlp */
    virtual void execute_planner(bool optimization_mode = false) const =0;

    /* Returns the planner's command */
    virtual std::string planner_command(bool optimization_mode = false) const =0;

    /* Reads the plan found in the planner's output */
    virtual void read_plan(FILE* planner_stdout, plan_t& plan) =0;

public :
	/* Constructs a deterministic planner */
	DeterministicPlanner(const BaseDeterminization& det) : det_(det) {}

	/* Deletes this deterministic planner */
	virtual ~DeterministicPlanner() {}

	/* Solves the current deterministic problem (generated by BaseDeterminization) and fills in the given plan */
	void solve(plan_t& plan, bool optimization_mode = false);

	/* Solves the current deterministic problem (generated by BaseDeterminization) with a given time out and fills in the given plan */
	void solve_with_timeout(plan_t& plan, unsigned int timeout, bool optimization_mode = false);
};

#endif /*DETERMINISTIC_PLANNER_H_*/
